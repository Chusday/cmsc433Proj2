CMSC 433 Project 2

* Authors: Dylan Chu            : vh30178@umbc.edu
	       - Class pre-req code
	       - Documentation
	   Kayoung Kim          : kayoung2@umbc.edu
	       - Re-design code 
	       - login system
	       - changed the looks as well 
	       - new DB 
	   Neh Patel            : npatel10@umbc.edu
	       - Code clean-up 
	       - Documentation 
	       - help on whatever code did not work

===========================================================
* Location: http://userpages.umbc.edu/~npatel10/pjt2/gitCode/cmsc433Proj2/project2_new2/
+ Preferred Browser: Google Chrome
  - did not seem to have any issue. Safari, and firefox acted weird 
    sometimes 

===========================================================
* Project Description: 
  - This a revised project that the authors received from another 
    group. The purpose of the project is to create a web page 
    that helps advisors in the department of computer science 
    at UMBC. It helps them advise students on what classes 
    the can take currently depending on what courses they have 
    already taken previously. The web page allow the student to 
    login or sign up, by entering their name, email, and 
    UMBC student ID. Using the ID the database selects their 
    information and views it on the page, if the ID does not 
    exist in the DB, then it creates a new account, and stores
    the new information in the database. 
    - That can be erroneous since a typo in student ID creates 
      new student information. More validation, or better 
      interface needs to be implemented for this, but it is 
      not required so it has not been implemented. EL OH EL.      

--> How to use it: 
    + Enter student information: 
      - First/Last Name: validate to make sure it is only 
      		   	 alphabets (upper or lower case). 
			 No spaces OR symbols
      - email: only umbc emails work since it is a site designed for 
               umbc students
      - id: AB12345 is the format. The alphabets need to be uppercase,
          followed by 5 numbers
    + Once signed in, there will be a taken, available and 
      cart section. 
      - Taken: shows the classes already taken by the student
      	       If there are none in this table, then the 
	       student has obviously not taken any classes yet.
      - Available: shows the classes that can be taken by the student
      		   DOUBLE-CLICK on class symbol to add to the cart. 
      - Cart: has all classes that the student selects to add,	   
      	      can also delete the classes from cart, by clicking on the 
	      delete option. 
    + Once done adding class. Select save classes taken button 
      on top-right of the page. The classes should show up on 
      taken lists once save is hit. This also saves the data 
      in the database. 
    + Log out button: to log the student out of the account. 

===========================================================
* What did we add
 
+ The most important thing that was the drastically improved was 
  the database 
+ Not using a JSON file that was used to strore the 
  classes details. The formatting of the file and 
  readability issues just makes everything worse. 
+ The way the look of the web page was presented gave the 
  user a sense of a login system. So we introduced an 
  actual login system for it. 
+ Another thing that was changed was the type of servers
  - Old: used a Lamp server, and raspberry pie. The students 
         invested in a hardware, unless they got it for free. 
	 But still a waste of resources.
  - New: Used the school database and servers which are 
         already provided to the users for free(kind of,
	 we still pay tuition). 
+ Number of files is much less 

===========================================================
* What did we improve
  - The database: Previous project had 6 tables. New one has just 
    2 tables. Much less data being stored hence increasing 
    the amount of data that can be stored in the database.
     
  - Used JSON objects to store course information. There were a couple 
    formatting(syntax) error in the file. Once fixed through 
    debugging process, php was still unable to parse the file.
    So, instead the JSON concept was thrown out of the window
    completely. Not using it at all was actually an 
    improvement by decreasing the amount of code to read and 
    understand. 
 
  - Previous project used the DB to figure the course pre-reqs 
    and show class availability. This is just more unnecessary data 
    being stored in the DB again. Furthermore 2 tables were used for 
    this. This can be avoided by just having an array that stores 
    the prerequisites. 

  - The code didnâ€™t work at all in the courses taken, available, and cart tables.
    So, getting a working project to actually show the 
    courses in the tables.  

===========================================================
* DB setup
  - screentshot, why?
  + 2 tables to store all information 
    - STUDENT 
      = used to store student information 
      - Primary Key: student_id
      - student_cid        : student umbc id   
      - student_first_name : first name
      - student_last_name  : last name 
 
    - proj2_taken (many-to-many relation btw students/courses)
      - Primary Key: taken_id
      - student_id         : student id (not umbc id)
      - class_id 	   : class id 

Why such a model was used?
    - This is probably the best model for this scenario
    - It reduced the redundancy the previous model had, but 
      it also makes accessing old data much easier. The only tables 
      that have information added to it are students, and proj2_taken. 
      Students is only updated when a new student signs up. 
      proj2_taken is the one that has new data stored in it all the
      time since it stores all the courses taken by all the students. 
      It sounds messy, but sql select statements make life easier 
      to access certain students data. This makes it least amount 
      of data being stored in the DB. 
  
===========================================================
* DB dump
  - The database dump file is named 'kayoung2.sql' 
  - It should dump three tables that are required for the 
    code to work correctly. Those tables are: 
    - Students (primary key: student_id) 
 
    - proj2_taken 
      - relational table of Students
      - the file should also be able to alter and create the
        relation between the two tables 

===========================================================
* Languages used
  - Html 
    - used for the pages and basic setup 
  - PHP
    - most of the code here. 
      - enabled login interface
      - validation of student information 
      - class pre-requisite validation 
  - Javascript (functions.js) 
    - few functions that assisted in login interface 
  - Ajax 
    - assisted in the login interface
    - mostly appears in functions.js

===========================================================
Slick Sheet
